%numLetters = 6 for dutch plates
function [img,factor,value,xcoorletters] = getAllLettersY(grayImage, numLetters)
%Start with empty array, add images to it when found 
imageArray = [1;1];
%keep array with initial sizes of the images found
imageSizes = [];

%Loop over gray scale values to get clearest character images.
for factor=60:5:160
    %figures = 0;
    img = grayImage;
    img(img > factor) = 0; %Put everything higher than x on grayscale to black
    img(img > 0) = 255; %Put the rest to white
    b = img&1; %Make binary image
    st = regionprops(b, 'Area', 'BoundingBox'); 
    boundingBoxArray = [st.BoundingBox]; %Get an array of all bounding boxes
    z=2;

    %Go through the array, but skip 4 as each 4 numbers are 
    %the corners of the bounding box
    for n=1:4:length(boundingBoxArray) 
        %If the height of the character is larger than 10
        if(boundingBoxArray(n+3) > 10) 
            %The width/height ratio must be in the right range to be a
            %character on a license plate
            if((boundingBoxArray(n+3)/boundingBoxArray(n+2)) >= 1.3 && (boundingBoxArray(n+3)/boundingBoxArray(n+2))<=3) 
                if figures == 0
                    img1 = imcrop(grayImage, [array(n)-z array(n+1)-z array(n+2)+(2*z) array(n+3)+(2*z)]);
                    sizeImg1 = array(n+2) * array(n+3);
                    value(1) = array(n);
                    value(2) = array(n+1);
                    value(3) = array(n+2);
                    value(4) = array(n+3);
                    xcoorletters(1) = array(n);
                    vector1 = reshape(img1, 1, size(img1,1)*size(img1,2));
                    imageArray = [imageArray; vector1];
                elseif figures == 1
                    img2 = imcrop(grayImage, [array(n)-z array(n+1)-z array(n+2)+(2*z) array(n+3)+(2*z)]);
                    sizeImg2 = array(n+2) * array(n+3);
                    xcoorletters(2) = array(n)+(array(n+2)/2);
                    vector2 = reshape(img2, 1, size(img2,1)*size(img2,2));
                    imageArray = [imageArray; vector2];
                elseif figures == 2
                    img3 = imcrop(grayImage, [array(n)-z array(n+1)-z array(n+2)+(2*z) array(n+3)+(2*z)]);
                    sizeImg3 = array(n+2) * array(n+3);
                    xcoorletters(3) = array(n)+(array(n+2)/2);
                    imageArray = cat(2, imageArray, img3);
                elseif figures == 3
                    img4 = imcrop(grayImage, [array(n)-z array(n+1)-z array(n+2)+(2*z) array(n+3)+(2*z)]);
                    sizeImg4 = array(n+2) * array(n+3);
                    xcoorletters(4) = array(n)+(array(n+2)/2);
                    imageArray = cat(2, imageArray, img4);
                elseif figures == 4
                    img5 = imcrop(grayImage, [array(n)-z array(n+1)-z array(n+2)+(2*z) array(n+3)+(2*z)]);
                   sizeImg5 = array(n+2) * array(n+3);
                    xcoorletters(5) = array(n)+(array(n+2)/2);
                    imageArray = cat(2, imageArray, img5);
                elseif figures == 5
                    img6 = imcrop(grayImage, [array(n)-z array(n+1)-z array(n+2)+(2*z) array(n+3)+(2*z)]);
                    sizeImg6 = array(n+2) * array(n+3);
                    value(5) = array(n);
                    xcoorletters(6) = array(n)+(array(n+2));
                    imageArray = cat(2, imageArray, img6);
                end
                figures = figures + 1;
                if figures == 6
                if length(imageArray) == numLetters
                %   WHYYY ?
                    small = min(imageSizes);
                    big = max(imagesSizes);
                    if (big/small < 1.5)
                        break;
                    else
                    %    figures = 0;
                        imageArray = [];
                    %    imagesSizes = 0?
                    end
                end
            end
        end
    end
    %if figures == 6
    if length(imageArray) == numLetters
        break;
    end
end
end